
ThereminCopy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000072e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000007a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7b  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b2  00000000  00000000  000015e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a6  00000000  00000000  00001f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  0000253c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004be  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042a  00000000  00000000  00002afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002f28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	5c c0       	rjmp	.+184    	; 0xbe <__bad_interrupt>
   6:	00 00       	nop
   8:	5a c0       	rjmp	.+180    	; 0xbe <__bad_interrupt>
   a:	00 00       	nop
   c:	58 c0       	rjmp	.+176    	; 0xbe <__bad_interrupt>
   e:	00 00       	nop
  10:	56 c0       	rjmp	.+172    	; 0xbe <__bad_interrupt>
  12:	00 00       	nop
  14:	c6 c0       	rjmp	.+396    	; 0x1a2 <__vector_5>
  16:	00 00       	nop
  18:	52 c0       	rjmp	.+164    	; 0xbe <__bad_interrupt>
  1a:	00 00       	nop
  1c:	50 c0       	rjmp	.+160    	; 0xbe <__bad_interrupt>
  1e:	00 00       	nop
  20:	4e c0       	rjmp	.+156    	; 0xbe <__bad_interrupt>
  22:	00 00       	nop
  24:	4c c0       	rjmp	.+152    	; 0xbe <__bad_interrupt>
  26:	00 00       	nop
  28:	4a c0       	rjmp	.+148    	; 0xbe <__bad_interrupt>
  2a:	00 00       	nop
  2c:	48 c0       	rjmp	.+144    	; 0xbe <__bad_interrupt>
  2e:	00 00       	nop
  30:	46 c0       	rjmp	.+140    	; 0xbe <__bad_interrupt>
  32:	00 00       	nop
  34:	44 c0       	rjmp	.+136    	; 0xbe <__bad_interrupt>
  36:	00 00       	nop
  38:	42 c0       	rjmp	.+132    	; 0xbe <__bad_interrupt>
  3a:	00 00       	nop
  3c:	40 c0       	rjmp	.+128    	; 0xbe <__bad_interrupt>
  3e:	00 00       	nop
  40:	3e c0       	rjmp	.+124    	; 0xbe <__bad_interrupt>
  42:	00 00       	nop
  44:	3c c0       	rjmp	.+120    	; 0xbe <__bad_interrupt>
  46:	00 00       	nop
  48:	3a c0       	rjmp	.+116    	; 0xbe <__bad_interrupt>
  4a:	00 00       	nop
  4c:	38 c0       	rjmp	.+112    	; 0xbe <__bad_interrupt>
  4e:	00 00       	nop
  50:	36 c0       	rjmp	.+108    	; 0xbe <__bad_interrupt>
  52:	00 00       	nop
  54:	34 c0       	rjmp	.+104    	; 0xbe <__bad_interrupt>
  56:	00 00       	nop
  58:	32 c0       	rjmp	.+100    	; 0xbe <__bad_interrupt>
  5a:	00 00       	nop
  5c:	30 c0       	rjmp	.+96     	; 0xbe <__bad_interrupt>
  5e:	00 00       	nop
  60:	2e c0       	rjmp	.+92     	; 0xbe <__bad_interrupt>
  62:	00 00       	nop
  64:	2c c0       	rjmp	.+88     	; 0xbe <__bad_interrupt>
  66:	00 00       	nop
  68:	2a c0       	rjmp	.+84     	; 0xbe <__bad_interrupt>
  6a:	00 00       	nop
  6c:	28 c0       	rjmp	.+80     	; 0xbe <__bad_interrupt>
  6e:	00 00       	nop
  70:	26 c0       	rjmp	.+76     	; 0xbe <__bad_interrupt>
  72:	00 00       	nop
  74:	24 c0       	rjmp	.+72     	; 0xbe <__bad_interrupt>
  76:	00 00       	nop
  78:	22 c0       	rjmp	.+68     	; 0xbe <__bad_interrupt>
  7a:	00 00       	nop
  7c:	20 c0       	rjmp	.+64     	; 0xbe <__bad_interrupt>
  7e:	00 00       	nop
  80:	1e c0       	rjmp	.+60     	; 0xbe <__bad_interrupt>
  82:	00 00       	nop
  84:	1c c0       	rjmp	.+56     	; 0xbe <__bad_interrupt>
  86:	00 00       	nop
  88:	1a c0       	rjmp	.+52     	; 0xbe <__bad_interrupt>
  8a:	00 00       	nop
  8c:	77 01       	movw	r14, r14
  8e:	82 01       	movw	r16, r4
  90:	8d 01       	movw	r16, r26
  92:	98 01       	movw	r18, r16
  94:	a3 01       	movw	r20, r6
  96:	ae 01       	movw	r20, r28
  98:	b9 01       	movw	r22, r18
  9a:	c4 01       	movw	r24, r8
  9c:	cf 01       	movw	r24, r30

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e1       	ldi	r29, 0x10	; 16
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_clear_bss>:
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
  b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
  b4:	a4 30       	cpi	r26, 0x04	; 4
  b6:	b2 07       	cpc	r27, r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
  ba:	d9 d0       	rcall	.+434    	; 0x26e <main>
  bc:	36 c3       	rjmp	.+1644   	; 0x72a <_exit>

000000be <__bad_interrupt>:
  be:	a0 cf       	rjmp	.-192    	; 0x0 <__vectors>

000000c0 <playTune>:
		_delay_us(1);
	}
}

void playTune(long frequency, long milis)
{
  c0:	8f 92       	push	r8
  c2:	9f 92       	push	r9
  c4:	af 92       	push	r10
  c6:	bf 92       	push	r11
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	4b 01       	movw	r8, r22
  da:	5c 01       	movw	r10, r24
	long t = 0;
	//long delay = 8000000L / frequency / 2L;
	long count = milis * 8000L;
  dc:	a0 e4       	ldi	r26, 0x40	; 64
  de:	bf e1       	ldi	r27, 0x1F	; 31
  e0:	d5 d2       	rcall	.+1450   	; 0x68c <__muluhisi3>
  e2:	6b 01       	movw	r12, r22
  e4:	7c 01       	movw	r14, r24
	while(t < count)
  e6:	16 16       	cp	r1, r22
  e8:	17 06       	cpc	r1, r23
  ea:	18 06       	cpc	r1, r24
  ec:	19 06       	cpc	r1, r25
  ee:	7c f5       	brge	.+94     	; 0x14e <playTune+0x8e>
	{
		delay_us(1000000/frequency/2);
  f0:	60 e2       	ldi	r22, 0x20	; 32
  f2:	71 ea       	ldi	r23, 0xA1	; 161
  f4:	87 e0       	ldi	r24, 0x07	; 7
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	a5 01       	movw	r20, r10
  fa:	94 01       	movw	r18, r8
  fc:	a2 d2       	rcall	.+1348   	; 0x642 <__divmodsi4>
  fe:	12 2f       	mov	r17, r18
 100:	d3 2f       	mov	r29, r19
 102:	82 2f       	mov	r24, r18
 104:	93 2f       	mov	r25, r19
 106:	9c 01       	movw	r18, r24
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	ba 01       	movw	r22, r20
		PORTF ^= (0b00001000);
 10e:	a2 e6       	ldi	r26, 0x62	; 98
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	c8 e0       	ldi	r28, 0x08	; 8
		t += TCNT3;
 114:	e8 e8       	ldi	r30, 0x88	; 136
 116:	f0 e0       	ldi	r31, 0x00	; 0
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>

inline static void delay_us(int count) {
	while(count--) {
 118:	21 15       	cp	r18, r1
 11a:	31 05       	cpc	r19, r1
 11c:	41 f0       	breq	.+16     	; 0x12e <playTune+0x6e>
 11e:	81 2f       	mov	r24, r17
 120:	9d 2f       	mov	r25, r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	02 e0       	ldi	r16, 0x02	; 2
 124:	0a 95       	dec	r16
 126:	f1 f7       	brne	.-4      	; 0x124 <playTune+0x64>
 128:	00 c0       	rjmp	.+0      	; 0x12a <playTune+0x6a>
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	d1 f7       	brne	.-12     	; 0x122 <playTune+0x62>
	//long delay = 8000000L / frequency / 2L;
	long count = milis * 8000L;
	while(t < count)
	{
		delay_us(1000000/frequency/2);
		PORTF ^= (0b00001000);
 12e:	8c 91       	ld	r24, X
 130:	8c 27       	eor	r24, r28
 132:	8c 93       	st	X, r24
		t += TCNT3;
 134:	80 81       	ld	r24, Z
 136:	91 81       	ldd	r25, Z+1	; 0x01
 138:	48 0f       	add	r20, r24
 13a:	59 1f       	adc	r21, r25
 13c:	61 1d       	adc	r22, r1
 13e:	71 1d       	adc	r23, r1
		TCNT3 = 0;
 140:	11 82       	std	Z+1, r1	; 0x01
 142:	10 82       	st	Z, r1
void playTune(long frequency, long milis)
{
	long t = 0;
	//long delay = 8000000L / frequency / 2L;
	long count = milis * 8000L;
	while(t < count)
 144:	4c 15       	cp	r20, r12
 146:	5d 05       	cpc	r21, r13
 148:	6e 05       	cpc	r22, r14
 14a:	7f 05       	cpc	r23, r15
 14c:	2c f3       	brlt	.-54     	; 0x118 <playTune+0x58>
		delay_us(1000000/frequency/2);
		PORTF ^= (0b00001000);
		t += TCNT3;
		TCNT3 = 0;
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	ff 90       	pop	r15
 158:	ef 90       	pop	r14
 15a:	df 90       	pop	r13
 15c:	cf 90       	pop	r12
 15e:	bf 90       	pop	r11
 160:	af 90       	pop	r10
 162:	9f 90       	pop	r9
 164:	8f 90       	pop	r8
 166:	08 95       	ret

00000168 <wait>:

void wait( int ms )

{
	for (int i=0; i<ms; i++)
 168:	18 16       	cp	r1, r24
 16a:	19 06       	cpc	r1, r25
 16c:	6c f4       	brge	.+26     	; 0x188 <wait+0x20>
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	ef ec       	ldi	r30, 0xCF	; 207
 174:	f7 e0       	ldi	r31, 0x07	; 7
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <wait+0xe>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <wait+0x14>
 17c:	00 00       	nop
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
 182:	82 17       	cp	r24, r18
 184:	93 07       	cpc	r25, r19
 186:	a9 f7       	brne	.-22     	; 0x172 <wait+0xa>
 188:	08 95       	ret

0000018a <echo>:
int distance;

void echo(void){
		
		//digitalWrite(trigPin, HIGH);
		PORTE = 0b00000100;
 18a:	84 e0       	ldi	r24, 0x04	; 4
 18c:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	8f ec       	ldi	r24, 0xCF	; 207
 190:	97 e0       	ldi	r25, 0x07	; 7
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <echo+0x8>
 196:	00 c0       	rjmp	.+0      	; 0x198 <echo+0xe>
 198:	00 00       	nop
		
		//delayMicroseconds(1000);
		_delay_us(1000);
		
		//digitalWrite(trigPin, LOW);
		PORTE = 0b00000000;
 19a:	13 b8       	out	0x03, r1	; 3
		TCNT1 = 0;
 19c:	1d bc       	out	0x2d, r1	; 45
 19e:	1c bc       	out	0x2c, r1	; 44
 1a0:	08 95       	ret

000001a2 <__vector_5>:
}


ISR(INT4_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	0b b6       	in	r0, 0x3b	; 59
 1ae:	0f 92       	push	r0
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
	if (PINE & 0b00010000)
 1cc:	0c 9b       	sbis	0x01, 4	; 1
 1ce:	0a c0       	rjmp	.+20     	; 0x1e4 <__vector_5+0x42>
	{
		duration = 0;
 1d0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <duration+0x1>
 1d4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <duration>
		TCNT1 = 0;
 1d8:	1d bc       	out	0x2d, r1	; 45
 1da:	1c bc       	out	0x2c, r1	; 44
		TCCR1B |= 0b10;	
 1dc:	8e b5       	in	r24, 0x2e	; 46
 1de:	82 60       	ori	r24, 0x02	; 2
 1e0:	8e bd       	out	0x2e, r24	; 46
 1e2:	30 c0       	rjmp	.+96     	; 0x244 <__vector_5+0xa2>
	}else
	{
		TCCR1B = 0;
 1e4:	1e bc       	out	0x2e, r1	; 46
		duration = TCNT1;
 1e6:	cc b5       	in	r28, 0x2c	; 44
 1e8:	dd b5       	in	r29, 0x2d	; 45
 1ea:	d0 93 03 01 	sts	0x0103, r29	; 0x800103 <duration+0x1>
 1ee:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <duration>
		//todo get timer number
		distance = (duration/2) / 29.1;
 1f2:	be 01       	movw	r22, r28
 1f4:	dd 23       	and	r29, r29
 1f6:	14 f4       	brge	.+4      	; 0x1fc <__vector_5+0x5a>
 1f8:	6f 5f       	subi	r22, 0xFF	; 255
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255
 1fc:	75 95       	asr	r23
 1fe:	67 95       	ror	r22
 200:	07 2e       	mov	r0, r23
 202:	00 0c       	add	r0, r0
 204:	88 0b       	sbc	r24, r24
 206:	99 0b       	sbc	r25, r25
 208:	7d d1       	rcall	.+762    	; 0x504 <__floatsisf>
 20a:	2d ec       	ldi	r18, 0xCD	; 205
 20c:	3c ec       	ldi	r19, 0xCC	; 204
 20e:	48 ee       	ldi	r20, 0xE8	; 232
 210:	51 e4       	ldi	r21, 0x41	; 65
 212:	dd d0       	rcall	.+442    	; 0x3ce <__divsf3>
 214:	44 d1       	rcall	.+648    	; 0x49e <__fixsfsi>
 216:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 21a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
		PORTB = duration/10;
 21e:	ce 01       	movw	r24, r28
 220:	6a e0       	ldi	r22, 0x0A	; 10
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	fb d1       	rcall	.+1014   	; 0x61c <__divmodhi4>
 226:	68 bb       	out	0x18, r22	; 24
		if (distance >= 200 || distance <= 0){
 228:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 22c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 230:	9c 01       	movw	r18, r24
 232:	21 50       	subi	r18, 0x01	; 1
 234:	31 09       	sbc	r19, r1
 236:	27 3c       	cpi	r18, 0xC7	; 199
 238:	31 05       	cpc	r19, r1
 23a:	18 f0       	brcs	.+6      	; 0x242 <__vector_5+0xa0>
			//Serial.println("Out of range");
			PORTA = 0b11111111;
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	8b bb       	out	0x1b, r24	; 27
 240:	01 c0       	rjmp	.+2      	; 0x244 <__vector_5+0xa2>
		}
		else {
			//Serial.print(distance);
			//Serial.println(" cm");
			PORTA = distance;
 242:	8b bb       	out	0x1b, r24	; 27
		}
	}
}
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0b be       	out	0x3b, r0	; 59
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <main>:
{
	int tune = 0;
	int oct = 0;
	int tonelen = 200;
	int lastOct = 0;
	DDRD = 0b00000100;
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	81 bb       	out	0x11, r24	; 17
	DDRA = 0b11111111;
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b11111111;
 276:	87 bb       	out	0x17, r24	; 23
	
	EICRB = 0b00000001;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0b00010000;
 27c:	80 e1       	ldi	r24, 0x10	; 16
 27e:	89 bf       	out	0x39, r24	; 57
	sei();
 280:	78 94       	sei
	
	DDRF = 0b00001000;			//set DDRD3 as output
 282:	88 e0       	ldi	r24, 0x08	; 8
 284:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	TCCR3B |= 0b00000001;	//set up timer
 288:	ea e8       	ldi	r30, 0x8A	; 138
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	81 60       	ori	r24, 0x01	; 1
 290:	80 83       	st	Z, r24
int main(void)
{
	int tune = 0;
	int oct = 0;
	int tonelen = 200;
	int lastOct = 0;
 292:	c1 2c       	mov	r12, r1
 294:	d1 2c       	mov	r13, r1
	}
}

int main(void)
{
	int tune = 0;
 296:	00 e0       	ldi	r16, 0x00	; 0
 298:	10 e0       	ldi	r17, 0x00	; 0
	TCCR3B |= 0b00000001;	//set up timer
	while(1)
	{
		echo();
		if(PORTA < 0b11111111){
			tune = 1050 - (PORTA * 4);
 29a:	0f 2e       	mov	r0, r31
 29c:	fa e1       	ldi	r31, 0x1A	; 26
 29e:	ef 2e       	mov	r14, r31
 2a0:	f4 e0       	ldi	r31, 0x04	; 4
 2a2:	ff 2e       	mov	r15, r31
 2a4:	f0 2d       	mov	r31, r0
	
	DDRF = 0b00001000;			//set DDRD3 as output
	TCCR3B |= 0b00000001;	//set up timer
	while(1)
	{
		echo();
 2a6:	71 df       	rcall	.-286    	; 0x18a <echo>
		if(PORTA < 0b11111111){
 2a8:	8b b3       	in	r24, 0x1b	; 27
 2aa:	8f 3f       	cpi	r24, 0xFF	; 255
 2ac:	39 f0       	breq	.+14     	; 0x2bc <main+0x4e>
			tune = 1050 - (PORTA * 4);
 2ae:	8b b3       	in	r24, 0x1b	; 27
 2b0:	87 01       	movw	r16, r14
 2b2:	94 e0       	ldi	r25, 0x04	; 4
 2b4:	89 9f       	mul	r24, r25
 2b6:	00 19       	sub	r16, r0
 2b8:	11 09       	sbc	r17, r1
 2ba:	11 24       	eor	r1, r1
		}
		if(tune > 100)
 2bc:	05 36       	cpi	r16, 0x65	; 101
 2be:	11 05       	cpc	r17, r1
 2c0:	0c f4       	brge	.+2      	; 0x2c4 <main+0x56>
 2c2:	81 c0       	rjmp	.+258    	; 0x3c6 <main+0x158>
		{
			//playTune(tune, 100);
			oct = PORTA / 8;
 2c4:	8b b3       	in	r24, 0x1b	; 27
 2c6:	e8 2f       	mov	r30, r24
 2c8:	e6 95       	lsr	r30
 2ca:	e6 95       	lsr	r30
 2cc:	e6 95       	lsr	r30
 2ce:	ce 2f       	mov	r28, r30
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
			if(lastOct != oct){
 2d2:	cc 16       	cp	r12, r28
 2d4:	dd 06       	cpc	r13, r29
 2d6:	09 f4       	brne	.+2      	; 0x2da <main+0x6c>
 2d8:	72 c0       	rjmp	.+228    	; 0x3be <main+0x150>
				lastOct = oct;
				switch(oct)
 2da:	8e 2f       	mov	r24, r30
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	89 30       	cpi	r24, 0x09	; 9
 2e0:	91 05       	cpc	r25, r1
 2e2:	08 f0       	brcs	.+2      	; 0x2e6 <main+0x78>
 2e4:	67 c0       	rjmp	.+206    	; 0x3b4 <main+0x146>
 2e6:	fc 01       	movw	r30, r24
 2e8:	ea 5b       	subi	r30, 0xBA	; 186
 2ea:	ff 4f       	sbci	r31, 0xFF	; 255
 2ec:	c6 c1       	rjmp	.+908    	; 0x67a <__tablejump2__>
				{
					case (0):
						playTune(261, tonelen);
 2ee:	28 ec       	ldi	r18, 0xC8	; 200
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	65 e0       	ldi	r22, 0x05	; 5
 2f8:	71 e0       	ldi	r23, 0x01	; 1
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	e0 de       	rcall	.-576    	; 0xc0 <playTune>
		if(tune > 100)
		{
			//playTune(tune, 100);
			oct = PORTA / 8;
			if(lastOct != oct){
				lastOct = oct;
 300:	6e 01       	movw	r12, r28
				switch(oct)
				{
					case (0):
						playTune(261, tonelen);
						break;
 302:	d1 cf       	rjmp	.-94     	; 0x2a6 <main+0x38>
					case (1):
						playTune(293,tonelen);
 304:	28 ec       	ldi	r18, 0xC8	; 200
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	65 e2       	ldi	r22, 0x25	; 37
 30e:	71 e0       	ldi	r23, 0x01	; 1
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	d5 de       	rcall	.-598    	; 0xc0 <playTune>
		if(tune > 100)
		{
			//playTune(tune, 100);
			oct = PORTA / 8;
			if(lastOct != oct){
				lastOct = oct;
 316:	6e 01       	movw	r12, r28
					case (0):
						playTune(261, tonelen);
						break;
					case (1):
						playTune(293,tonelen);
						break;
 318:	c6 cf       	rjmp	.-116    	; 0x2a6 <main+0x38>
					case (2):
						playTune(329,tonelen);
 31a:	28 ec       	ldi	r18, 0xC8	; 200
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	69 e4       	ldi	r22, 0x49	; 73
 324:	71 e0       	ldi	r23, 0x01	; 1
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	ca de       	rcall	.-620    	; 0xc0 <playTune>
		if(tune > 100)
		{
			//playTune(tune, 100);
			oct = PORTA / 8;
			if(lastOct != oct){
				lastOct = oct;
 32c:	6e 01       	movw	r12, r28
					case (1):
						playTune(293,tonelen);
						break;
					case (2):
						playTune(329,tonelen);
						break;
 32e:	bb cf       	rjmp	.-138    	; 0x2a6 <main+0x38>
					case (3):
						playTune(349,tonelen);
 330:	28 ec       	ldi	r18, 0xC8	; 200
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	6d e5       	ldi	r22, 0x5D	; 93
 33a:	71 e0       	ldi	r23, 0x01	; 1
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	bf de       	rcall	.-642    	; 0xc0 <playTune>
		if(tune > 100)
		{
			//playTune(tune, 100);
			oct = PORTA / 8;
			if(lastOct != oct){
				lastOct = oct;
 342:	6e 01       	movw	r12, r28
					case (2):
						playTune(329,tonelen);
						break;
					case (3):
						playTune(349,tonelen);
						break;
 344:	b0 cf       	rjmp	.-160    	; 0x2a6 <main+0x38>
					case (4):
						playTune(391,tonelen);
 346:	28 ec       	ldi	r18, 0xC8	; 200
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	50 e0       	ldi	r21, 0x00	; 0
 34e:	67 e8       	ldi	r22, 0x87	; 135
 350:	71 e0       	ldi	r23, 0x01	; 1
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	b4 de       	rcall	.-664    	; 0xc0 <playTune>
		if(tune > 100)
		{
			//playTune(tune, 100);
			oct = PORTA / 8;
			if(lastOct != oct){
				lastOct = oct;
 358:	6e 01       	movw	r12, r28
					case (3):
						playTune(349,tonelen);
						break;
					case (4):
						playTune(391,tonelen);
						break;
 35a:	a5 cf       	rjmp	.-182    	; 0x2a6 <main+0x38>
					case (5):
						playTune(440,tonelen);
 35c:	28 ec       	ldi	r18, 0xC8	; 200
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	50 e0       	ldi	r21, 0x00	; 0
 364:	68 eb       	ldi	r22, 0xB8	; 184
 366:	71 e0       	ldi	r23, 0x01	; 1
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	a9 de       	rcall	.-686    	; 0xc0 <playTune>
		if(tune > 100)
		{
			//playTune(tune, 100);
			oct = PORTA / 8;
			if(lastOct != oct){
				lastOct = oct;
 36e:	6e 01       	movw	r12, r28
					case (4):
						playTune(391,tonelen);
						break;
					case (5):
						playTune(440,tonelen);
						break;
 370:	9a cf       	rjmp	.-204    	; 0x2a6 <main+0x38>
					case (6):
						playTune(493,tonelen);
 372:	28 ec       	ldi	r18, 0xC8	; 200
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	6d ee       	ldi	r22, 0xED	; 237
 37c:	71 e0       	ldi	r23, 0x01	; 1
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	9e de       	rcall	.-708    	; 0xc0 <playTune>
		if(tune > 100)
		{
			//playTune(tune, 100);
			oct = PORTA / 8;
			if(lastOct != oct){
				lastOct = oct;
 384:	6e 01       	movw	r12, r28
						break;
					case (6):
						playTune(493,tonelen);
						break;
					case (7):
						playTune(523,tonelen);
 386:	8f cf       	rjmp	.-226    	; 0x2a6 <main+0x38>
 388:	28 ec       	ldi	r18, 0xC8	; 200
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	50 e0       	ldi	r21, 0x00	; 0
 390:	6b e0       	ldi	r22, 0x0B	; 11
 392:	72 e0       	ldi	r23, 0x02	; 2
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	93 de       	rcall	.-730    	; 0xc0 <playTune>
						break;
 39a:	6e 01       	movw	r12, r28
					case (8):
						playTune(587,tonelen);
 39c:	84 cf       	rjmp	.-248    	; 0x2a6 <main+0x38>
 39e:	28 ec       	ldi	r18, 0xC8	; 200
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	40 e0       	ldi	r20, 0x00	; 0
 3a4:	50 e0       	ldi	r21, 0x00	; 0
 3a6:	6b e4       	ldi	r22, 0x4B	; 75
 3a8:	72 e0       	ldi	r23, 0x02	; 2
 3aa:	80 e0       	ldi	r24, 0x00	; 0
		if(tune > 100)
		{
			//playTune(tune, 100);
			oct = PORTA / 8;
			if(lastOct != oct){
				lastOct = oct;
 3ac:	90 e0       	ldi	r25, 0x00	; 0
					case (7):
						playTune(523,tonelen);
						break;
					case (8):
						playTune(587,tonelen);
						break;
 3ae:	88 de       	rcall	.-752    	; 0xc0 <playTune>
					default:
						wait(tonelen);
 3b0:	6e 01       	movw	r12, r28
 3b2:	79 cf       	rjmp	.-270    	; 0x2a6 <main+0x38>
 3b4:	88 ec       	ldi	r24, 0xC8	; 200
		if(tune > 100)
		{
			//playTune(tune, 100);
			oct = PORTA / 8;
			if(lastOct != oct){
				lastOct = oct;
 3b6:	90 e0       	ldi	r25, 0x00	; 0
					case (8):
						playTune(587,tonelen);
						break;
					default:
						wait(tonelen);
						break;
 3b8:	d7 de       	rcall	.-594    	; 0x168 <wait>
				}
			}else{
				wait(100);
 3ba:	6e 01       	movw	r12, r28
 3bc:	74 cf       	rjmp	.-280    	; 0x2a6 <main+0x38>
 3be:	84 e6       	ldi	r24, 0x64	; 100
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	d2 de       	rcall	.-604    	; 0x168 <wait>
			}
		}else{
			wait(100);
 3c4:	70 cf       	rjmp	.-288    	; 0x2a6 <main+0x38>
 3c6:	84 e6       	ldi	r24, 0x64	; 100
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	ce de       	rcall	.-612    	; 0x168 <wait>
 3cc:	6c cf       	rjmp	.-296    	; 0x2a6 <main+0x38>

000003ce <__divsf3>:
 3ce:	0c d0       	rcall	.+24     	; 0x3e8 <__divsf3x>
 3d0:	eb c0       	rjmp	.+470    	; 0x5a8 <__fp_round>
 3d2:	e3 d0       	rcall	.+454    	; 0x59a <__fp_pscB>
 3d4:	40 f0       	brcs	.+16     	; 0x3e6 <__divsf3+0x18>
 3d6:	da d0       	rcall	.+436    	; 0x58c <__fp_pscA>
 3d8:	30 f0       	brcs	.+12     	; 0x3e6 <__divsf3+0x18>
 3da:	21 f4       	brne	.+8      	; 0x3e4 <__divsf3+0x16>
 3dc:	5f 3f       	cpi	r21, 0xFF	; 255
 3de:	19 f0       	breq	.+6      	; 0x3e6 <__divsf3+0x18>
 3e0:	cc c0       	rjmp	.+408    	; 0x57a <__fp_inf>
 3e2:	51 11       	cpse	r21, r1
 3e4:	15 c1       	rjmp	.+554    	; 0x610 <__fp_szero>
 3e6:	cf c0       	rjmp	.+414    	; 0x586 <__fp_nan>

000003e8 <__divsf3x>:
 3e8:	f0 d0       	rcall	.+480    	; 0x5ca <__fp_split3>
 3ea:	98 f3       	brcs	.-26     	; 0x3d2 <__divsf3+0x4>

000003ec <__divsf3_pse>:
 3ec:	99 23       	and	r25, r25
 3ee:	c9 f3       	breq	.-14     	; 0x3e2 <__divsf3+0x14>
 3f0:	55 23       	and	r21, r21
 3f2:	b1 f3       	breq	.-20     	; 0x3e0 <__divsf3+0x12>
 3f4:	95 1b       	sub	r25, r21
 3f6:	55 0b       	sbc	r21, r21
 3f8:	bb 27       	eor	r27, r27
 3fa:	aa 27       	eor	r26, r26
 3fc:	62 17       	cp	r22, r18
 3fe:	73 07       	cpc	r23, r19
 400:	84 07       	cpc	r24, r20
 402:	38 f0       	brcs	.+14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 404:	9f 5f       	subi	r25, 0xFF	; 255
 406:	5f 4f       	sbci	r21, 0xFF	; 255
 408:	22 0f       	add	r18, r18
 40a:	33 1f       	adc	r19, r19
 40c:	44 1f       	adc	r20, r20
 40e:	aa 1f       	adc	r26, r26
 410:	a9 f3       	breq	.-22     	; 0x3fc <__divsf3_pse+0x10>
 412:	33 d0       	rcall	.+102    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 414:	0e 2e       	mov	r0, r30
 416:	3a f0       	brmi	.+14     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 418:	e0 e8       	ldi	r30, 0x80	; 128
 41a:	30 d0       	rcall	.+96     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 41c:	91 50       	subi	r25, 0x01	; 1
 41e:	50 40       	sbci	r21, 0x00	; 0
 420:	e6 95       	lsr	r30
 422:	00 1c       	adc	r0, r0
 424:	ca f7       	brpl	.-14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 426:	29 d0       	rcall	.+82     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 428:	fe 2f       	mov	r31, r30
 42a:	27 d0       	rcall	.+78     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	88 1f       	adc	r24, r24
 432:	bb 1f       	adc	r27, r27
 434:	26 17       	cp	r18, r22
 436:	37 07       	cpc	r19, r23
 438:	48 07       	cpc	r20, r24
 43a:	ab 07       	cpc	r26, r27
 43c:	b0 e8       	ldi	r27, 0x80	; 128
 43e:	09 f0       	breq	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	bb 0b       	sbc	r27, r27
 442:	80 2d       	mov	r24, r0
 444:	bf 01       	movw	r22, r30
 446:	ff 27       	eor	r31, r31
 448:	93 58       	subi	r25, 0x83	; 131
 44a:	5f 4f       	sbci	r21, 0xFF	; 255
 44c:	2a f0       	brmi	.+10     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 44e:	9e 3f       	cpi	r25, 0xFE	; 254
 450:	51 05       	cpc	r21, r1
 452:	68 f0       	brcs	.+26     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 454:	92 c0       	rjmp	.+292    	; 0x57a <__fp_inf>
 456:	dc c0       	rjmp	.+440    	; 0x610 <__fp_szero>
 458:	5f 3f       	cpi	r21, 0xFF	; 255
 45a:	ec f3       	brlt	.-6      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 45c:	98 3e       	cpi	r25, 0xE8	; 232
 45e:	dc f3       	brlt	.-10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 460:	86 95       	lsr	r24
 462:	77 95       	ror	r23
 464:	67 95       	ror	r22
 466:	b7 95       	ror	r27
 468:	f7 95       	ror	r31
 46a:	9f 5f       	subi	r25, 0xFF	; 255
 46c:	c9 f7       	brne	.-14     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 46e:	88 0f       	add	r24, r24
 470:	91 1d       	adc	r25, r1
 472:	96 95       	lsr	r25
 474:	87 95       	ror	r24
 476:	97 f9       	bld	r25, 7
 478:	08 95       	ret
 47a:	e1 e0       	ldi	r30, 0x01	; 1
 47c:	66 0f       	add	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	88 1f       	adc	r24, r24
 482:	bb 1f       	adc	r27, r27
 484:	62 17       	cp	r22, r18
 486:	73 07       	cpc	r23, r19
 488:	84 07       	cpc	r24, r20
 48a:	ba 07       	cpc	r27, r26
 48c:	20 f0       	brcs	.+8      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 48e:	62 1b       	sub	r22, r18
 490:	73 0b       	sbc	r23, r19
 492:	84 0b       	sbc	r24, r20
 494:	ba 0b       	sbc	r27, r26
 496:	ee 1f       	adc	r30, r30
 498:	88 f7       	brcc	.-30     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 49a:	e0 95       	com	r30
 49c:	08 95       	ret

0000049e <__fixsfsi>:
 49e:	04 d0       	rcall	.+8      	; 0x4a8 <__fixunssfsi>
 4a0:	68 94       	set
 4a2:	b1 11       	cpse	r27, r1
 4a4:	b5 c0       	rjmp	.+362    	; 0x610 <__fp_szero>
 4a6:	08 95       	ret

000004a8 <__fixunssfsi>:
 4a8:	98 d0       	rcall	.+304    	; 0x5da <__fp_splitA>
 4aa:	88 f0       	brcs	.+34     	; 0x4ce <__fixunssfsi+0x26>
 4ac:	9f 57       	subi	r25, 0x7F	; 127
 4ae:	90 f0       	brcs	.+36     	; 0x4d4 <__fixunssfsi+0x2c>
 4b0:	b9 2f       	mov	r27, r25
 4b2:	99 27       	eor	r25, r25
 4b4:	b7 51       	subi	r27, 0x17	; 23
 4b6:	a0 f0       	brcs	.+40     	; 0x4e0 <__fixunssfsi+0x38>
 4b8:	d1 f0       	breq	.+52     	; 0x4ee <__fixunssfsi+0x46>
 4ba:	66 0f       	add	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	88 1f       	adc	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	1a f0       	brmi	.+6      	; 0x4ca <__fixunssfsi+0x22>
 4c4:	ba 95       	dec	r27
 4c6:	c9 f7       	brne	.-14     	; 0x4ba <__fixunssfsi+0x12>
 4c8:	12 c0       	rjmp	.+36     	; 0x4ee <__fixunssfsi+0x46>
 4ca:	b1 30       	cpi	r27, 0x01	; 1
 4cc:	81 f0       	breq	.+32     	; 0x4ee <__fixunssfsi+0x46>
 4ce:	9f d0       	rcall	.+318    	; 0x60e <__fp_zero>
 4d0:	b1 e0       	ldi	r27, 0x01	; 1
 4d2:	08 95       	ret
 4d4:	9c c0       	rjmp	.+312    	; 0x60e <__fp_zero>
 4d6:	67 2f       	mov	r22, r23
 4d8:	78 2f       	mov	r23, r24
 4da:	88 27       	eor	r24, r24
 4dc:	b8 5f       	subi	r27, 0xF8	; 248
 4de:	39 f0       	breq	.+14     	; 0x4ee <__fixunssfsi+0x46>
 4e0:	b9 3f       	cpi	r27, 0xF9	; 249
 4e2:	cc f3       	brlt	.-14     	; 0x4d6 <__fixunssfsi+0x2e>
 4e4:	86 95       	lsr	r24
 4e6:	77 95       	ror	r23
 4e8:	67 95       	ror	r22
 4ea:	b3 95       	inc	r27
 4ec:	d9 f7       	brne	.-10     	; 0x4e4 <__fixunssfsi+0x3c>
 4ee:	3e f4       	brtc	.+14     	; 0x4fe <__fixunssfsi+0x56>
 4f0:	90 95       	com	r25
 4f2:	80 95       	com	r24
 4f4:	70 95       	com	r23
 4f6:	61 95       	neg	r22
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	8f 4f       	sbci	r24, 0xFF	; 255
 4fc:	9f 4f       	sbci	r25, 0xFF	; 255
 4fe:	08 95       	ret

00000500 <__floatunsisf>:
 500:	e8 94       	clt
 502:	09 c0       	rjmp	.+18     	; 0x516 <__floatsisf+0x12>

00000504 <__floatsisf>:
 504:	97 fb       	bst	r25, 7
 506:	3e f4       	brtc	.+14     	; 0x516 <__floatsisf+0x12>
 508:	90 95       	com	r25
 50a:	80 95       	com	r24
 50c:	70 95       	com	r23
 50e:	61 95       	neg	r22
 510:	7f 4f       	sbci	r23, 0xFF	; 255
 512:	8f 4f       	sbci	r24, 0xFF	; 255
 514:	9f 4f       	sbci	r25, 0xFF	; 255
 516:	99 23       	and	r25, r25
 518:	a9 f0       	breq	.+42     	; 0x544 <__floatsisf+0x40>
 51a:	f9 2f       	mov	r31, r25
 51c:	96 e9       	ldi	r25, 0x96	; 150
 51e:	bb 27       	eor	r27, r27
 520:	93 95       	inc	r25
 522:	f6 95       	lsr	r31
 524:	87 95       	ror	r24
 526:	77 95       	ror	r23
 528:	67 95       	ror	r22
 52a:	b7 95       	ror	r27
 52c:	f1 11       	cpse	r31, r1
 52e:	f8 cf       	rjmp	.-16     	; 0x520 <__floatsisf+0x1c>
 530:	fa f4       	brpl	.+62     	; 0x570 <__floatsisf+0x6c>
 532:	bb 0f       	add	r27, r27
 534:	11 f4       	brne	.+4      	; 0x53a <__floatsisf+0x36>
 536:	60 ff       	sbrs	r22, 0
 538:	1b c0       	rjmp	.+54     	; 0x570 <__floatsisf+0x6c>
 53a:	6f 5f       	subi	r22, 0xFF	; 255
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	8f 4f       	sbci	r24, 0xFF	; 255
 540:	9f 4f       	sbci	r25, 0xFF	; 255
 542:	16 c0       	rjmp	.+44     	; 0x570 <__floatsisf+0x6c>
 544:	88 23       	and	r24, r24
 546:	11 f0       	breq	.+4      	; 0x54c <__floatsisf+0x48>
 548:	96 e9       	ldi	r25, 0x96	; 150
 54a:	11 c0       	rjmp	.+34     	; 0x56e <__floatsisf+0x6a>
 54c:	77 23       	and	r23, r23
 54e:	21 f0       	breq	.+8      	; 0x558 <__floatsisf+0x54>
 550:	9e e8       	ldi	r25, 0x8E	; 142
 552:	87 2f       	mov	r24, r23
 554:	76 2f       	mov	r23, r22
 556:	05 c0       	rjmp	.+10     	; 0x562 <__floatsisf+0x5e>
 558:	66 23       	and	r22, r22
 55a:	71 f0       	breq	.+28     	; 0x578 <__floatsisf+0x74>
 55c:	96 e8       	ldi	r25, 0x86	; 134
 55e:	86 2f       	mov	r24, r22
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	2a f0       	brmi	.+10     	; 0x570 <__floatsisf+0x6c>
 566:	9a 95       	dec	r25
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	88 1f       	adc	r24, r24
 56e:	da f7       	brpl	.-10     	; 0x566 <__floatsisf+0x62>
 570:	88 0f       	add	r24, r24
 572:	96 95       	lsr	r25
 574:	87 95       	ror	r24
 576:	97 f9       	bld	r25, 7
 578:	08 95       	ret

0000057a <__fp_inf>:
 57a:	97 f9       	bld	r25, 7
 57c:	9f 67       	ori	r25, 0x7F	; 127
 57e:	80 e8       	ldi	r24, 0x80	; 128
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	08 95       	ret

00000586 <__fp_nan>:
 586:	9f ef       	ldi	r25, 0xFF	; 255
 588:	80 ec       	ldi	r24, 0xC0	; 192
 58a:	08 95       	ret

0000058c <__fp_pscA>:
 58c:	00 24       	eor	r0, r0
 58e:	0a 94       	dec	r0
 590:	16 16       	cp	r1, r22
 592:	17 06       	cpc	r1, r23
 594:	18 06       	cpc	r1, r24
 596:	09 06       	cpc	r0, r25
 598:	08 95       	ret

0000059a <__fp_pscB>:
 59a:	00 24       	eor	r0, r0
 59c:	0a 94       	dec	r0
 59e:	12 16       	cp	r1, r18
 5a0:	13 06       	cpc	r1, r19
 5a2:	14 06       	cpc	r1, r20
 5a4:	05 06       	cpc	r0, r21
 5a6:	08 95       	ret

000005a8 <__fp_round>:
 5a8:	09 2e       	mov	r0, r25
 5aa:	03 94       	inc	r0
 5ac:	00 0c       	add	r0, r0
 5ae:	11 f4       	brne	.+4      	; 0x5b4 <__fp_round+0xc>
 5b0:	88 23       	and	r24, r24
 5b2:	52 f0       	brmi	.+20     	; 0x5c8 <__fp_round+0x20>
 5b4:	bb 0f       	add	r27, r27
 5b6:	40 f4       	brcc	.+16     	; 0x5c8 <__fp_round+0x20>
 5b8:	bf 2b       	or	r27, r31
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <__fp_round+0x18>
 5bc:	60 ff       	sbrs	r22, 0
 5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__fp_round+0x20>
 5c0:	6f 5f       	subi	r22, 0xFF	; 255
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	8f 4f       	sbci	r24, 0xFF	; 255
 5c6:	9f 4f       	sbci	r25, 0xFF	; 255
 5c8:	08 95       	ret

000005ca <__fp_split3>:
 5ca:	57 fd       	sbrc	r21, 7
 5cc:	90 58       	subi	r25, 0x80	; 128
 5ce:	44 0f       	add	r20, r20
 5d0:	55 1f       	adc	r21, r21
 5d2:	59 f0       	breq	.+22     	; 0x5ea <__fp_splitA+0x10>
 5d4:	5f 3f       	cpi	r21, 0xFF	; 255
 5d6:	71 f0       	breq	.+28     	; 0x5f4 <__fp_splitA+0x1a>
 5d8:	47 95       	ror	r20

000005da <__fp_splitA>:
 5da:	88 0f       	add	r24, r24
 5dc:	97 fb       	bst	r25, 7
 5de:	99 1f       	adc	r25, r25
 5e0:	61 f0       	breq	.+24     	; 0x5fa <__fp_splitA+0x20>
 5e2:	9f 3f       	cpi	r25, 0xFF	; 255
 5e4:	79 f0       	breq	.+30     	; 0x604 <__fp_splitA+0x2a>
 5e6:	87 95       	ror	r24
 5e8:	08 95       	ret
 5ea:	12 16       	cp	r1, r18
 5ec:	13 06       	cpc	r1, r19
 5ee:	14 06       	cpc	r1, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	f2 cf       	rjmp	.-28     	; 0x5d8 <__fp_split3+0xe>
 5f4:	46 95       	lsr	r20
 5f6:	f1 df       	rcall	.-30     	; 0x5da <__fp_splitA>
 5f8:	08 c0       	rjmp	.+16     	; 0x60a <__fp_splitA+0x30>
 5fa:	16 16       	cp	r1, r22
 5fc:	17 06       	cpc	r1, r23
 5fe:	18 06       	cpc	r1, r24
 600:	99 1f       	adc	r25, r25
 602:	f1 cf       	rjmp	.-30     	; 0x5e6 <__fp_splitA+0xc>
 604:	86 95       	lsr	r24
 606:	71 05       	cpc	r23, r1
 608:	61 05       	cpc	r22, r1
 60a:	08 94       	sec
 60c:	08 95       	ret

0000060e <__fp_zero>:
 60e:	e8 94       	clt

00000610 <__fp_szero>:
 610:	bb 27       	eor	r27, r27
 612:	66 27       	eor	r22, r22
 614:	77 27       	eor	r23, r23
 616:	cb 01       	movw	r24, r22
 618:	97 f9       	bld	r25, 7
 61a:	08 95       	ret

0000061c <__divmodhi4>:
 61c:	97 fb       	bst	r25, 7
 61e:	07 2e       	mov	r0, r23
 620:	16 f4       	brtc	.+4      	; 0x626 <__divmodhi4+0xa>
 622:	00 94       	com	r0
 624:	06 d0       	rcall	.+12     	; 0x632 <__divmodhi4_neg1>
 626:	77 fd       	sbrc	r23, 7
 628:	08 d0       	rcall	.+16     	; 0x63a <__divmodhi4_neg2>
 62a:	3a d0       	rcall	.+116    	; 0x6a0 <__udivmodhi4>
 62c:	07 fc       	sbrc	r0, 7
 62e:	05 d0       	rcall	.+10     	; 0x63a <__divmodhi4_neg2>
 630:	3e f4       	brtc	.+14     	; 0x640 <__divmodhi4_exit>

00000632 <__divmodhi4_neg1>:
 632:	90 95       	com	r25
 634:	81 95       	neg	r24
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	08 95       	ret

0000063a <__divmodhi4_neg2>:
 63a:	70 95       	com	r23
 63c:	61 95       	neg	r22
 63e:	7f 4f       	sbci	r23, 0xFF	; 255

00000640 <__divmodhi4_exit>:
 640:	08 95       	ret

00000642 <__divmodsi4>:
 642:	05 2e       	mov	r0, r21
 644:	97 fb       	bst	r25, 7
 646:	16 f4       	brtc	.+4      	; 0x64c <__divmodsi4+0xa>
 648:	00 94       	com	r0
 64a:	0f d0       	rcall	.+30     	; 0x66a <__negsi2>
 64c:	57 fd       	sbrc	r21, 7
 64e:	05 d0       	rcall	.+10     	; 0x65a <__divmodsi4_neg2>
 650:	3b d0       	rcall	.+118    	; 0x6c8 <__udivmodsi4>
 652:	07 fc       	sbrc	r0, 7
 654:	02 d0       	rcall	.+4      	; 0x65a <__divmodsi4_neg2>
 656:	46 f4       	brtc	.+16     	; 0x668 <__divmodsi4_exit>
 658:	08 c0       	rjmp	.+16     	; 0x66a <__negsi2>

0000065a <__divmodsi4_neg2>:
 65a:	50 95       	com	r21
 65c:	40 95       	com	r20
 65e:	30 95       	com	r19
 660:	21 95       	neg	r18
 662:	3f 4f       	sbci	r19, 0xFF	; 255
 664:	4f 4f       	sbci	r20, 0xFF	; 255
 666:	5f 4f       	sbci	r21, 0xFF	; 255

00000668 <__divmodsi4_exit>:
 668:	08 95       	ret

0000066a <__negsi2>:
 66a:	90 95       	com	r25
 66c:	80 95       	com	r24
 66e:	70 95       	com	r23
 670:	61 95       	neg	r22
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	8f 4f       	sbci	r24, 0xFF	; 255
 676:	9f 4f       	sbci	r25, 0xFF	; 255
 678:	08 95       	ret

0000067a <__tablejump2__>:
 67a:	ee 0f       	add	r30, r30
 67c:	ff 1f       	adc	r31, r31
 67e:	00 24       	eor	r0, r0
 680:	00 1c       	adc	r0, r0
 682:	0b be       	out	0x3b, r0	; 59
 684:	07 90       	elpm	r0, Z+
 686:	f6 91       	elpm	r31, Z
 688:	e0 2d       	mov	r30, r0
 68a:	09 94       	ijmp

0000068c <__muluhisi3>:
 68c:	3f d0       	rcall	.+126    	; 0x70c <__umulhisi3>
 68e:	a5 9f       	mul	r26, r21
 690:	90 0d       	add	r25, r0
 692:	b4 9f       	mul	r27, r20
 694:	90 0d       	add	r25, r0
 696:	a4 9f       	mul	r26, r20
 698:	80 0d       	add	r24, r0
 69a:	91 1d       	adc	r25, r1
 69c:	11 24       	eor	r1, r1
 69e:	08 95       	ret

000006a0 <__udivmodhi4>:
 6a0:	aa 1b       	sub	r26, r26
 6a2:	bb 1b       	sub	r27, r27
 6a4:	51 e1       	ldi	r21, 0x11	; 17
 6a6:	07 c0       	rjmp	.+14     	; 0x6b6 <__udivmodhi4_ep>

000006a8 <__udivmodhi4_loop>:
 6a8:	aa 1f       	adc	r26, r26
 6aa:	bb 1f       	adc	r27, r27
 6ac:	a6 17       	cp	r26, r22
 6ae:	b7 07       	cpc	r27, r23
 6b0:	10 f0       	brcs	.+4      	; 0x6b6 <__udivmodhi4_ep>
 6b2:	a6 1b       	sub	r26, r22
 6b4:	b7 0b       	sbc	r27, r23

000006b6 <__udivmodhi4_ep>:
 6b6:	88 1f       	adc	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	5a 95       	dec	r21
 6bc:	a9 f7       	brne	.-22     	; 0x6a8 <__udivmodhi4_loop>
 6be:	80 95       	com	r24
 6c0:	90 95       	com	r25
 6c2:	bc 01       	movw	r22, r24
 6c4:	cd 01       	movw	r24, r26
 6c6:	08 95       	ret

000006c8 <__udivmodsi4>:
 6c8:	a1 e2       	ldi	r26, 0x21	; 33
 6ca:	1a 2e       	mov	r1, r26
 6cc:	aa 1b       	sub	r26, r26
 6ce:	bb 1b       	sub	r27, r27
 6d0:	fd 01       	movw	r30, r26
 6d2:	0d c0       	rjmp	.+26     	; 0x6ee <__udivmodsi4_ep>

000006d4 <__udivmodsi4_loop>:
 6d4:	aa 1f       	adc	r26, r26
 6d6:	bb 1f       	adc	r27, r27
 6d8:	ee 1f       	adc	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	a2 17       	cp	r26, r18
 6de:	b3 07       	cpc	r27, r19
 6e0:	e4 07       	cpc	r30, r20
 6e2:	f5 07       	cpc	r31, r21
 6e4:	20 f0       	brcs	.+8      	; 0x6ee <__udivmodsi4_ep>
 6e6:	a2 1b       	sub	r26, r18
 6e8:	b3 0b       	sbc	r27, r19
 6ea:	e4 0b       	sbc	r30, r20
 6ec:	f5 0b       	sbc	r31, r21

000006ee <__udivmodsi4_ep>:
 6ee:	66 1f       	adc	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	1a 94       	dec	r1
 6f8:	69 f7       	brne	.-38     	; 0x6d4 <__udivmodsi4_loop>
 6fa:	60 95       	com	r22
 6fc:	70 95       	com	r23
 6fe:	80 95       	com	r24
 700:	90 95       	com	r25
 702:	9b 01       	movw	r18, r22
 704:	ac 01       	movw	r20, r24
 706:	bd 01       	movw	r22, r26
 708:	cf 01       	movw	r24, r30
 70a:	08 95       	ret

0000070c <__umulhisi3>:
 70c:	a2 9f       	mul	r26, r18
 70e:	b0 01       	movw	r22, r0
 710:	b3 9f       	mul	r27, r19
 712:	c0 01       	movw	r24, r0
 714:	a3 9f       	mul	r26, r19
 716:	70 0d       	add	r23, r0
 718:	81 1d       	adc	r24, r1
 71a:	11 24       	eor	r1, r1
 71c:	91 1d       	adc	r25, r1
 71e:	b2 9f       	mul	r27, r18
 720:	70 0d       	add	r23, r0
 722:	81 1d       	adc	r24, r1
 724:	11 24       	eor	r1, r1
 726:	91 1d       	adc	r25, r1
 728:	08 95       	ret

0000072a <_exit>:
 72a:	f8 94       	cli

0000072c <__stop_program>:
 72c:	ff cf       	rjmp	.-2      	; 0x72c <__stop_program>
